{"ast":null,"code":"import { rest } from 'msw';\nconst doctorsData = [{\n  id: 1,\n  name: 'Dr. Anjali Sharma',\n  specialization: 'Cardiologist',\n  image: 'images/doc1.jpg',\n  availabilityStatus: 'Available Today',\n  schedule: [{\n    day: 'Monday',\n    time: '10:00 AM - 1:00 PM'\n  }, {\n    day: 'Wednesday',\n    time: '2:00 PM - 5:00 PM'\n  }, {\n    day: 'Friday',\n    time: '10:00 AM - 1:00 PM'\n  }]\n}, {\n  id: 2,\n  name: 'Dr. Vikram Singh',\n  specialization: 'Dermatologist',\n  image: 'images/doc2.jpg',\n  availabilityStatus: 'Fully Booked',\n  schedule: [{\n    day: 'Tuesday',\n    time: '9:00 AM - 12:00 PM'\n  }, {\n    day: 'Thursday',\n    time: '3:00 PM - 6:00 PM'\n  }]\n}, {\n  id: 3,\n  name: 'Dr. Priya Desai',\n  specialization: 'Pediatrician',\n  image: 'images/doc3.jpg',\n  availabilityStatus: 'On Leave',\n  schedule: []\n}];\n\n// This is the crucial part: handlers must be an array.\nexport const handlers = [\n// Mock endpoint to get all doctors\nrest.get('/api/doctors', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json(doctorsData));\n}),\n// Mock endpoint to get a single doctor by ID\nrest.get('/api/doctors/:id', (req, res, ctx) => {\n  const {\n    id\n  } = req.params;\n  const doctor = doctorsData.find(doc => doc.id === parseInt(id, 10));\n  if (doctor) {\n    return res(ctx.status(200), ctx.json(doctor));\n  }\n  return res(ctx.status(404), ctx.json({\n    message: 'Doctor not found'\n  }));\n})];","map":{"version":3,"names":["rest","doctorsData","id","name","specialization","image","availabilityStatus","schedule","day","time","handlers","get","req","res","ctx","status","json","params","doctor","find","doc","parseInt","message"],"sources":["C:/Users/CHETAN PONUGOTI/Desktop/Niroggyan/healthcare-booking-app-final/src/mocks/handlers.js"],"sourcesContent":["import { rest } from 'msw'\r\n\r\nconst doctorsData = [\r\n  {\r\n    id: 1,\r\n    name: 'Dr. Anjali Sharma',\r\n    specialization: 'Cardiologist',\r\n    image: 'images/doc1.jpg',\r\n    availabilityStatus: 'Available Today',\r\n    schedule: [\r\n      { day: 'Monday', time: '10:00 AM - 1:00 PM' },\r\n      { day: 'Wednesday', time: '2:00 PM - 5:00 PM' },\r\n      { day: 'Friday', time: '10:00 AM - 1:00 PM' },\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Dr. Vikram Singh',\r\n    specialization: 'Dermatologist',\r\n    image: 'images/doc2.jpg',\r\n    availabilityStatus: 'Fully Booked',\r\n    schedule: [\r\n      { day: 'Tuesday', time: '9:00 AM - 12:00 PM' },\r\n      { day: 'Thursday', time: '3:00 PM - 6:00 PM' },\r\n    ],\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Dr. Priya Desai',\r\n    specialization: 'Pediatrician',\r\n    image: 'images/doc3.jpg',\r\n    availabilityStatus: 'On Leave',\r\n    schedule: [],\r\n  },\r\n]\r\n\r\n// This is the crucial part: handlers must be an array.\r\nexport const handlers = [\r\n  // Mock endpoint to get all doctors\r\n  rest.get('/api/doctors', (req, res, ctx) => {\r\n    return res(ctx.status(200), ctx.json(doctorsData))\r\n  }),\r\n\r\n  // Mock endpoint to get a single doctor by ID\r\n  rest.get('/api/doctors/:id', (req, res, ctx) => {\r\n    const { id } = req.params\r\n    const doctor = doctorsData.find(doc => doc.id === parseInt(id, 10))\r\n    if (doctor) {\r\n      return res(ctx.status(200), ctx.json(doctor))\r\n    }\r\n    return res(ctx.status(404), ctx.json({ message: 'Doctor not found' }))\r\n  }),\r\n]"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,MAAMC,WAAW,GAAG,CAClB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,mBAAmB;EACzBC,cAAc,EAAE,cAAc;EAC9BC,KAAK,EAAE,iBAAiB;EACxBC,kBAAkB,EAAE,iBAAiB;EACrCC,QAAQ,EAAE,CACR;IAAEC,GAAG,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAqB,CAAC,EAC7C;IAAED,GAAG,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAoB,CAAC,EAC/C;IAAED,GAAG,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAqB,CAAC;AAEjD,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,kBAAkB;EACxBC,cAAc,EAAE,eAAe;EAC/BC,KAAK,EAAE,iBAAiB;EACxBC,kBAAkB,EAAE,cAAc;EAClCC,QAAQ,EAAE,CACR;IAAEC,GAAG,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAqB,CAAC,EAC9C;IAAED,GAAG,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAoB,CAAC;AAElD,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,iBAAiB;EACvBC,cAAc,EAAE,cAAc;EAC9BC,KAAK,EAAE,iBAAiB;EACxBC,kBAAkB,EAAE,UAAU;EAC9BC,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAMG,QAAQ,GAAG;AACtB;AACAV,IAAI,CAACW,GAAG,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC1C,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EAAED,GAAG,CAACE,IAAI,CAACf,WAAW,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF;AACAD,IAAI,CAACW,GAAG,CAAC,kBAAkB,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC9C,MAAM;IAAEZ;EAAG,CAAC,GAAGU,GAAG,CAACK,MAAM;EACzB,MAAMC,MAAM,GAAGjB,WAAW,CAACkB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAClB,EAAE,KAAKmB,QAAQ,CAACnB,EAAE,EAAE,EAAE,CAAC,CAAC;EACnE,IAAIgB,MAAM,EAAE;IACV,OAAOL,GAAG,CAACC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EAAED,GAAG,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EAC/C;EACA,OAAOL,GAAG,CAACC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EAAED,GAAG,CAACE,IAAI,CAAC;IAAEM,OAAO,EAAE;EAAmB,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module"}